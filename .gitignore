import asyncio
import logging
import requests
import json
import time
from aiogram import Bot, Dispatcher
from aiogram.methods import DeleteWebhook
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from mistralai import Mistral
import random

MISTRAL_API_KEY = "YOUR_OWN_API_KEY"  # ‚ö†Ô∏è YOU NEED TO REPLACE IT WITH YOUR OWN API KEY
PRODIA_API_KEY = 'YOUR_OWN_API_KEY' # ‚ö†Ô∏è CHANGE API KEY

TELEGRAM_TOKEN = 'YOUR_OWN_TOKEN'  # ‚ö†Ô∏è CHANGE TOKEN

mistral_model = "mistral-small-latest"
mistral_client = Mistral(api_key=MISTRAL_API_KEY)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

def get_job(prompt, style):
    url = "https://api.prodia.com/v1/sdxl/generate"
    payload = {
        "prompt": prompt,
        "style_preset": style,
        "sampler": "DPM++ 2M Karras"
    }
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "X-Prodia-Key": PRODIA_API_KEY
    }
    response = requests.post(url, json=payload, headers=headers)
    res = response.json()
    return res.get('job')

def get_image_url(job):
    url = f"https://api.prodia.com/v1/job/{job}"
    headers = {
        "accept": "application/json",
        "X-Prodia-Key": PRODIA_API_KEY
    }
    response = requests.get(url, headers=headers)
    res = response.json()
    return res.get('imageUrl'), res.get('status')

def generate_random_prompt():
    words = ["sunset", "forest", "robot", "castle", "magic", "ocean", "sky", "galaxy", "future", "dream", "reflection", "serenity", "bloom", "drift", "horizon", "radiance", "journey", "mirage", "whispers", "twilightss"]
    return " ".join(random.sample(words, 3))

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    start_text = "Hi! My name is Ted. \n\nUse this commands to reveal my abilities ü§´  \n\n/about-learn more about me üòâ \n\n/generate-generates an image üñºÔ∏è \n\n/random-generates a random image ü§© \n\nYou can also communicate with me without any commands üëΩ "
    await bot.send_message(message.chat.id, start_text)

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    about_text = "Hello! Allow me to introduce myself in a bit more detail. My name is Ted, and I am an advanced, picture-based AI model created by the brilliant mind of Ugur üß† \n\nUnlike typical AI, I specialize in interpreting and generating images, making me an ideal companion for creative endeavors and visual exploration üëÅÔ∏è \n\nWith cutting-edge algorithms and a vast dataset, I am equipped to understand visual concepts, provide artistic suggestions, and even generate entirely new images based on detailed prompts üß© \n\nFrom creating breathtaking landscapes to envisioning futuristic cities, I bring imagination to life, one pixel at a time ‚õ∞Ô∏è \n\nAs I continue to evolve, my ability to learn and adapt to new styles and ideas will only grow, allowing me to assist in even more exciting and innovative ways üìà \n\nWelcome to a world where art meets technology! üåç"
    await bot.send_message(message.chat.id, about_text)

@dp.message(Command("generate"))
async def generate_image(msg: Message):
    user_message = msg.text.replace("/generate", "").strip()
    if not user_message:
        await bot.send_message(msg.chat.id, "Please enter a description of the image after the command. \n\n Example: /generate -----")
        return

    styles = ["3d-model", "anime", "analog-film", "fantasy-art", "pixel-art"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=style, callback_data=f"style:{style}|{user_message}")]
        for style in styles
    ])

    await bot.send_message(msg.chat.id, "Choose a style for your image:", reply_markup=keyboard)

@dp.message(Command("random"))
async def random_image(msg: Message):
    random_prompt = generate_random_prompt()

    styles = ["3d-model", "anime", "analog-film", "fantasy-art", "pixel-art"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=style, callback_data=f"style:{style}|{random_prompt}")]
        for style in styles
    ])

    await bot.send_message(msg.chat.id, f"Random prompt: {random_prompt}\nChoose a style for your image:", reply_markup=keyboard)

@dp.callback_query()
async def process_style(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data.startswith("style:"):
        _, style_and_prompt = data.split(":", 1)
        style, prompt = style_and_prompt.split("|", 1)

        await bot.send_message(callback_query.message.chat.id, "Image is being generated, please wait a few minutes...")

        try:
            job_name = get_job(prompt, style)
            status = 'generating'
            image_url = None

            while status == 'generating':
                time.sleep(5)
                image_url, status = get_image_url(job_name)

            if image_url:
                await bot.send_photo(callback_query.message.chat.id, photo=image_url, caption="Your image is ready!")
            else:
                await bot.send_message(callback_query.message.chat.id, "There was an error generating the image. Please try again later.")

        except Exception as e:
            await bot.send_message(callback_query.message.chat.id, f"An error occurred: {str(e)}")

@dp.message()
async def message_handler(msg: Message):
    chat_response = mistral_client.chat.complete(
        model=mistral_model,
        messages=[
            {
                "role": "user",
                "content": msg.text,
            },
        ]
    )
    await bot.send_message(msg.chat.id, chat_response.choices[0].message.content, parse_mode="Markdown")

async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# By Ugur ‚ö†Ô∏è
